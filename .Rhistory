# Generate a bar chart graph with mean Outcome in BOL, FQ, OBL
barplot(tapply(AAD$D1.Shannon.diversity,list(AAD$Outcome), mean), xlab="Antibiotics",
ylab="Mean Outcome", main="Mean Outcome Barplot")
barplot(tapply(AAD$D1.Shannon.diversity,list(Outcome=AAD$Outcome),mean),
xlab="Outcome",ylab="D1.Shannon.diversity", main="Mean Outcome Barplot", col = c("red","blue"))
barplot(tapply(AAD$D1.Shannon.diversity,list(Outcome=AAD$Outcome),mean),
xlab="Outcome",ylab="D1.Shannon.diversity", main="Mean Outcome Barplot", col = c("red","blue","purple"))
# Make a scatterplot of 2 continuous variables D1 Shannon and D6 Shannon
plot(D6.Shannon.diversity[Antibiotic.class=="OBL"]~D1.Shannon.diversity[Antibiotic.class=="OBL"],
data= AAD, xlab="D1.Shannon", ylab="D6.Shannon", main="D1.Shannon and D6.Shannon Scatterplot")
plot(AAD$D1.Shannon.diversity[AAD$Antibiotic.class=="FQN"],AAD$D6.Shannon.diversity[AAD$Antibiotic.class=="FQN"],
col=6,xlab="D1.Shannon.diversity",ylab="D6.Shannon.diversity",main="Scatterplot")
# Make a scatterplot of 2 continuous variables D1 Shannon and D6 Shannon
plot(D6.Shannon.diversity[Antibiotic.class=="OBL"]~D1.Shannon.diversity[Antibiotic.class=="OBL"],
data= AAD, xlab="D1.Shannon", ylab="D6.Shannon", main="D1.Shannon and D6.Shannon Scatterplot")
# Make a scatterplot of 2 continuous variables D1 Shannon and D6 Shannon
plot(D1.Shannon.diversity[Antibiotic.class=="OBL"]~D6.Shannon.diversity[Antibiotic.class=="OBL"],
data= AAD, xlab="D1.Shannon", ylab="D6.Shannon", main="D1.Shannon and D6.Shannon Scatterplot")
plot(AAD$D1.Shannon.diversity[AAD$Antibiotic.class=="FQN"],AAD$D6.Shannon.diversity[AAD$Antibiotic.class=="FQN"],
col=6,xlab="D1.Shannon.diversity",ylab="D6.Shannon.diversity",main="Scatterplot")
# Make a scatterplot of 2 continuous variables D1 Shannon and D6 Shannon
plot(D1.Shannon.diversity[Antibiotic.class=="OBL"]~D6.Shannon.diversity[Antibiotic.class=="OBL"],
data= AAD, xlab="D1.Shannon", ylab="D6.Shannon", main="D1.Shannon and D6.Shannon Scatterplot")
plot(AAD$D1.Shannon.diversity[AAD$Antibiotic.class=="FQN"],AAD$D6.Shannon.diversity[AAD$Antibiotic.class=="FQN"],
col=6,xlab="D1.Shannon.diversity",ylab="D6.Shannon.diversity",main="Scatterplot")
points(D6.Shannon.diversity[Antibiotic.class=="FQN"]~D1.Shannon.diversity[Antibiotic.class=="FQN"],
data= AAD)
points(D6.Shannon.diversity[Antibiotic.class=="FQN"]~D1.Shannon.diversity[Antibiotic.class=="FQN"],
data= AAD)
# Make a scatterplot of 2 continuous variables D1 Shannon and D6 Shannon
plot(D1.Shannon.diversity[Antibiotic.class=="OBL"]~D6.Shannon.diversity[Antibiotic.class=="OBL"],
data= AAD, xlab="D1.Shannon", ylab="D6.Shannon", main="D1.Shannon and D6.Shannon Scatterplot")
points(D6.Shannon.diversity[Antibiotic.class=="FQN"]~D1.Shannon.diversity[Antibiotic.class=="FQN"],
data= AAD)
# add the regression lines for each antibiotics
abline(lm(AAD$D6.Shannon.diversity[AAD$Antibiotic.class=="OBL"]~
AAD$D1.Shannon.diversity[AAD$Antibiotic.class=="OBL"]))
abline(lm(D1.Shannon.diversity[Antibiotic.class=="FQN"]~D6.Shannon.diversity[Antibiotic.class=="FQN"]),col=6)
str(AAD)
# Make a boxplot of Jacard distance
boxplot(AAD$D1.D6.Jaccard.distance, main="Jacard Distance Boxplot")
boxplot(AAD$D1.D6.Jaccard.distance~AAD$Antibiotic.class,data=AAD,main="Boxplot per Antibiotics")
boxplot(AAD$D1.D6.Jaccard.distance~AAD$Antibiotic.class,data=AAD,main="Boxplot per Antibiotics",
xlab="Antibiotics",ylab="D1.D6.Jaccard.distance")
View(AAD)
str(AAD)
table(AAD$Outcome)
# We hypothesis that Chao/Shannon at day 6 different between CDI vs ND.
t.test(AAD$D6.Chao1.diversity[AAD$Outcome=="CDI"],
AAD$D6.Chao1.diversity[AAD$Outcome=="ND"], var.equal=T)
t.test(AAD$D6.Shannon.diversity[AAD$Outcome=="CDI"],
AAD$D6.Shannon.diversity[AAD$Outcome=="ND"], var.equal=T)
# Assess whether the previous test assumptions have been met for the test.
shapiro.test(AAD$D6.Chao1.diversity)
shapiro.test(AAD$D6.Shannon.diversity)
# Check the homoscedasticity using Bartlet’s test.
var.test(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity)
bartlett.test(list(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity))
# Check the homoscedasticity using Bartlet’s test.
library(car)
leveneTest(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity)
leveneTest(AAD$D1.Shannon.diversity~AAD$D6.Shannon.diversity)
# Check the homoscedasticity using Bartlet’s test.
bartlett.test(list(AAD$D1.Chao1.diversity,AAD$D6.Chao1.diversity))
var.test(AAD$D1.Chao1.diversity,AAD$D6.Chao1.diversity)
# Assess whether the previous test assumptions have been met for the test.
shapiro.test(AAD$D6.Chao1.diversity[AAD$Outcome=="CDI"])
# Assess whether the previous test assumptions have been met for the test.
shapiro.test(AAD$D6.Chao1.diversity[AAD$Outcome=="CDI"])
shapiro.test(AAD$D6.Chao1.diversity[AAD$Outcome=="ND"])
shapiro.test(AAD$D6.Shannon.diversity[AAD$Outcome=="CDI"])
shapiro.test(AAD$D6.Shannon.diversity[AAD$Outcome=="ND"])
# We hypothesis that Chao/Shannon at day 6 different between CDI vs ND.
t.test(AAD$D6.Chao1.diversity[AAD$Outcome=="CDI"],
AAD$D6.Chao1.diversity[AAD$Outcome=="ND"], var.equal=T)
t.test(AAD$D6.Shannon.diversity[AAD$Outcome=="CDI"],
AAD$D6.Shannon.diversity[AAD$Outcome=="ND"], var.equal=T)
# Assess whether the previous test assumptions have been met for the test.
shapiro.test(AAD$D6.Chao1.diversity[AAD$Outcome=="CDI"])
shapiro.test(AAD$D6.Chao1.diversity[AAD$Outcome=="ND"])
# We hypothesis that Chao/Shannon at day 6 different between CDI vs ND.
t.test(AAD$D6.Chao1.diversity[AAD$Outcome=="CDI"],
AAD$D6.Chao1.diversity[AAD$Outcome=="ND"], var.equal=T)
# Assess whether the previous test assumptions have been met for the test.
shapiro.test(AAD$D6.Chao1.diversity[AAD$Outcome=="CDI"])
shapiro.test(AAD$D6.Chao1.diversity[AAD$Outcome=="ND"])
shapiro.test(AAD$D6.Shannon.diversity[AAD$Outcome=="CDI"])
shapiro.test(AAD$D6.Shannon.diversity[AAD$Outcome=="ND"])
leveneTest(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity)
# Check the homoscedasticity using levene plots
library(car)
leveneTest(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity)
# Check the homoscedasticity using Bartlet’s test.
bartlett.test(list(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity))
# Check the homoscedasticity using Bartlett test test.
bartlett.test(list(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity))
var.test(list(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity))
var.test(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity)
var.test(AAD$D1.Chao1.diversity,AAD$D6.Chao1.diversity)
# Check the homoscedasticity using Bartlett test and F-test
bartlett.test(list(AAD$D1.Chao1.diversity,AAD$D6.Chao1.diversity))
# Check the homoscedasticity using Bartlett test and F-test
bartlett.test(list(AAD$D1.Chao1.diversity,AAD$D1.D6.Jaccard.distance))
var.test(AAD$D1.Chao1.diversity,AAD$D1.D6.Jaccard.distance)
# another way using t-test
t.test(AAD[AAD$Antibiotic.class=="OBL",]$D1.D6.Jaccard.distance,conf.level = .90)
# sample mean, standard deviation, sample size, standard error of Jacard distance
sample_mean= mean(AAD[AAD$Antibiotic.class=="OBL",]$D1.D6.Jaccard.distance)
s= sd(tapply(AAD$D1.D6.Jaccard.distance, AAD$Antibiotic.class=="OBL", mean ))
n= length(tapply(AAD$D1.D6.Jaccard.distance, AAD$Antibiotic.class=="OBL", mean ))
SE= s/sqrt(n)
# Margin of error tells you how many percentage points your results will differ
# from the real population value. (Difference between uppermost limit of interval
# and sample mean)
# Also it can be calculated by z*SE where z is the critical value from
# the standard normal distribution corresponding to a 90% confidence level
# z = 1.96 for a 95% confidence level, z = 2.58 for a 99% confidence level z = 1.645
# for a 90% confidence level
margin= 1.645*SE
# calculating uppermost and lowermost levels of confidence intervals
lowerlimit= sample_mean-margin
upperlimit= sample_mean+margin
lowerlimit
upperlimit
# Calculate the 90% confidence interval for the means of Jacard distance
confint(lm(D1.D6.Jaccard.distance~Antibiotic.class, AAD), level=0.90)
# Anova
library(car)
library(report)
View(AAD)
# Anova
shapiro= by(AAD$D1.D6.Jaccard.distance, AAD$Antibiotic.class, shapiro.test)
shapiro
homogeneity <- leveneTest(as.matrix(AAD$D1.D6.Jaccard.distance, AAD$Antibiotic.class))
# We hypothesis that Jacard distance is different between the different Antibiotics.
# Can you perform comparison between the different groups, after assessing the assumptions
# and performing post-hoc testing (assuming normality and homoscedasticity).
AnovaModel = aov(D1.D6.Jaccard.distance~Antibiotic.class, mydata, var.e)
# We hypothesis that Jacard distance is different between the different Antibiotics.
# Can you perform comparison between the different groups, after assessing the assumptions
# and performing post-hoc testing (assuming normality and homoscedasticity).
AnovaModel = aov(D1.D6.Jaccard.distance~Antibiotic.class, AAD, var.e)
# We hypothesis that Jacard distance is different between the different Antibiotics.
# Can you perform comparison between the different groups, after assessing the assumptions
# and performing post-hoc testing (assuming normality and homoscedasticity).
AnovaModel = aov(D1.D6.Jaccard.distance~Antibiotic.class, AAD, var.equal=T)
# We hypothesis that Jacard distance is different between the different Antibiotics.
# Can you perform comparison between the different groups, after assessing the assumptions
# and performing post-hoc testing (assuming normality and homoscedasticity).
AnovaModel = aov(D1.D6.Jaccard.distance~Antibiotic.class, AAD)
AnovaModel
summary(AnovaModel)
report(AnovaModel)
coef(AnovaModel)
qqnorm(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class])
qqnorm(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "PBL"])
qqline(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "PBL"])
qqnorm(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "FQN"])
qqline(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "FQN"])
qqnorm(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "OBL"])
qqline(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "OBL"])
qqnorm(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "PBL"])
qqline(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "PBL"])
qqnorm(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "FQN"])
qqline(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "FQN"])
qqnorm(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "OBL"])
qqline(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class== "OBL"])
# perform kruskal-wallis test
kruskal = kruskal.test(D1.D6.Jaccard.distance~Antibiotic.class, mydata)
# perform kruskal-wallis test
kruskal = kruskal.test(D1.D6.Jaccard.distance~Antibiotic.class, AAD)
kruskal
summary(kruskal)
report(kruskal)
coef(AnovaModel)
plot(AnovaModel)
plot(D1.D6.Jaccard.distance~Antibiotic.class, AAD)
plot(AAD$D1.D6.Jaccard.distance, AAD$Antibiotic.class)
# Posthoc
TukeyHSD(krusal)
# Posthoc
TukeyHSD(kruskal)
AnovaModel
# Posthoc
TukeyHSD(AnovaModel)
plot(TukeyHSD(AnovaModel))
library(dunn.test)
dunn_test <- dunn.test(AAD$D1.D6.Jaccard.distance, AAD$Antibiotic.class, method = "bonferroni")
plot(dunn_test)
#Multiple Regression:-
linear_reg <- lm(D6.Chao1.diversity~D1.Chao1.diversity, data = mydata)
#Multiple Regression:-
linear_reg <- lm(D6.Chao1.diversity~D1.Chao1.diversity, data = AAD)
linear_reg
confint(linear_reg, level = 0.95)
summary(linear_reg)
#Multiple Regression:-
linear_reg <- lm(D1.Shannon.diversity~D1.Chao1.diversity, data = AAD)
summary(linear_reg)
#Multiple Regression:-
linear_reg <- lm(D6.Chao1.diversity[AAD$Antibiotic.class=="FQN"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="FQN"], data = AAD)
summary(linear_reg)
linear_reg <- lm(D6.Chao1.diversity[AAD$Antibiotic.class=="PBL"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="PBL"], data = AAD)
summary(linear_reg)
linear_reg <- lm(D6.Chao1.diversity[AAD$Antibiotic.class=="OBL"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="OBL"], data = AAD)
summary(linear_reg)
#Multiple Regression:-
linear_reg <- lm(AAD$D1.D6.Jaccard.distance[AAD$Antibiotic.class=="FQN"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="FQN"], data = AAD)
summary(linear_reg)
linear_reg <- lm(D1.D6.Jaccard.distance[AAD$Antibiotic.class=="PBL"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="PBL"], data = AAD)
summary(linear_reg)
#Multiple Regression:-
linear_reg <- lm(D1.D6.Jaccard.distance[AAD$Antibiotic.class=="FQN"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="FQN"], data = AAD)
summary(linear_reg)
linear_reg <- lm(D6.Chao1.diversity[AAD$Antibiotic.class=="OBL"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="OBL"], data = AAD)
summary(linear_reg)
avPlots(linear_reg)
#Multiple Regression:-
linear_reg <- lm(AAD$D1.Shannon.diversity[AAD$Antibiotic.class=="FQN"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="FQN"], data = AAD)
summary(linear_reg)
#Multiple Regression:-
linear_reg <- lm(D1.Shannon.diversity[AAD$Antibiotic.class=="FQN"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="FQN"], data = AAD)
summary(linear_reg)
linear_reg <- lm(D1.Shannon.diversity[AAD$Antibiotic.class=="OBL"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="OBL"], data = AAD)
summary(linear_reg)
linear_reg <- lm(D1.Shannon.diversity[AAD$Antibiotic.class=="PBL"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="PBL"], data = AAD)
summary(linear_reg)
#Multiple Regression:-
library(car)
linear_reg <- lm(D1.Shannon.diversity[AAD$Antibiotic.class=="FQN"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="FQN"], data = AAD)
summary(linear_reg)
avPlots(linear_reg)
linear_reg <- lm(D1.Shannon.diversity[AAD$Antibiotic.class=="PBL"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="PBL"], data = AAD)
summary(linear_reg)
avPlots(linear_reg)
linear_reg <- lm(D1.Shannon.diversity[AAD$Antibiotic.class=="OBL"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="OBL"], data = AAD)
summary(linear_reg)
avPlots(linear_reg)
# Calculate the confidence interval for the slope(Bonus)
confint(linear_reg, level = 0.95)
summary(linear_reg)
linear_reg <- lm(D1.Shannon.diversity[AAD$Antibiotic.class=="PBL"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="PBL"], data = AAD)
summary(linear_reg)
avPlots(linear_reg)
linear_reg <- lm(D1.Shannon.diversity[AAD$Antibiotic.class=="OBL"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="OBL"], data = AAD)
summary(linear_reg)
linear_reg <- lm(D1.Shannon.diversity[AAD$Antibiotic.class=="FQN"]~
D1.Chao1.diversity[AAD$Antibiotic.class=="FQN"], data = AAD)
summary(linear_reg)
plot(D1.Chao1.diversity, D6.Chao1.diversityy)
plot(AAD$D1.Chao1.diversity, AAD$D6.Chao1.diversityy)
abline(model)
abline(linear_reg)
plot(AAD$D1.Chao1.diversity, AAD$D6.Chao1.diversityy)
abline(linear_reg)
# Check the normality of variables using QQ plot
qqnorm(AAD$D1.Shannon.diversity)
qqline(AAD$D1.Shannon.diversity)
qqnorm(AAD$D6.Shannon.diversity)
qqline(AAD$D6.Shannon.diversity)
qqnorm(AAD$D1.Chao1.diversity)
qqline(AAD$D1.Chao1.diversity)
qqnorm(AAD$D6.Chao1.diversity)
qqline(AAD$D6.Chao1.diversity)
qqnorm(AAD$D1.D6.Jaccard.distance)
qqline(AAD$D1.D6.Jaccard.distance)
# Check the normality of variables using histogram
hist(AAD$D1.Shannon.diversity, xlab="D1 Shannon", main="D1 Shannon Histogram")
hist(AAD$D6.Shannon.diversity, xlab="D6 Shannon", main="D6 Shannon Histogram")
hist(AAD$D1.Chao1.diversity, xlab="D1 Chao1", main="D1 Chao1 Histogram")
hist(AAD$D6.Chao1.diversity, xlab="D6 Chao1", main="D6 Chao1 Histogram")
hist(AAD$D1.D6.Jaccard.distance, xlab="Jacard Distance", main="Jacard Distance Histogram")
# Check the normality of variables using Shapiro Test
shapiro.test(AAD$D1.Shannon.diversity)
shapiro.test(AAD$D6.Shannon.diversity)
shapiro.test(AAD$D1.Chao1.diversity)
shapiro.test(AAD$D6.Chao1.diversity)
shapiro.test(AAD$D1.D6.Jaccard.distance)
# Check the homoscedasticity using Bartlett test test.
bartlett.test(list(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity))
var.test(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity)
# Check the homoscedasticity using Bartlett test test.
bartlett.test(list(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity))
var.test(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity)
# Check the homoscedasticity using residuals plots
plot(lm(D6.Chao1.diversity~D1.Chao1.diversity, data= AAD))
# Check the homoscedasticity using Bartlett test and F-test
bartlett.test(list(AAD$D1.Chao1.diversity,AAD$D6.Chao1.diversity))
var.test(AAD$D1.Chao1.diversity,AAD$D6.Chao1.diversity)
# Calculate the 90% confidence interval for the means of Jacard distance
confint(lm(D1.D6.Jaccard.distance~Antibiotic.class, AAD), level=0.90)
# Calculate the 95% confidence interval for the means of Jacard distance
confint(lm(D1.D6.Jaccard.distance~Antibiotic.class, AAD), level=0.95)
# Calculate the 95% confidence interval for the means of Jacard distance
confint(lm(D1.D6.Jaccard.distance~Antibiotic.class, AAD))
# Calculate the 99% confidence interval for the means of Jacard distance
confint(lm(D1.D6.Jaccard.distance~Antibiotic.class, AAD), level=0.99)
# Check the normality of variables using QQ plot
qqnorm(AAD$D1.Shannon.diversity)
qqline(AAD$D1.Shannon.diversity)
qqnorm(AAD$D6.Shannon.diversity)
qqline(AAD$D6.Shannon.diversity)
qqnorm(AAD$D1.Chao1.diversity)
qqline(AAD$D1.Chao1.diversity)
qqnorm(AAD$D6.Chao1.diversity)
qqline(AAD$D6.Chao1.diversity)
qqnorm(AAD$D1.D6.Jaccard.distance)
qqline(AAD$D1.D6.Jaccard.distance)
# Check the normality of variables using QQ plot
qqnorm(AAD$D1.Shannon.diversity)
qqline(AAD$D1.Shannon.diversity)
qqnorm(AAD$D6.Shannon.diversity)
qqline(AAD$D6.Shannon.diversity)
qqnorm(AAD$D1.Chao1.diversity)
qqline(AAD$D1.Chao1.diversity)
D1.Chao1.diversity
D1.Chao1.diversity
qqnorm(AAD$D6.Chao1.diversity)
qqline(AAD$D6.Chao1.diversity)
qqnorm(AAD$D1.D6.Jaccard.distance)
qqline(AAD$D1.D6.Jaccard.distance)
# Check the normality of variables using histogram
hist(AAD$D1.Shannon.diversity, xlab="D1 Shannon", main="D1 Shannon Histogram")
hist(AAD$D6.Shannon.diversity, xlab="D6 Shannon", main="D6 Shannon Histogram")
hist(AAD$D1.Chao1.diversity, xlab="D1 Chao1", main="D1 Chao1 Histogram")
hist(AAD$D6.Chao1.diversity, xlab="D6 Chao1", main="D6 Chao1 Histogram")
hist(AAD$D1.D6.Jaccard.distance, xlab="Jacard Distance", main="Jacard Distance Histogram")
# Check the normality of variables using Shapiro Test
shapiro.test(AAD$D1.Shannon.diversity)
# Check the normality of variables using histogram
hist(AAD$D1.Shannon.diversity, xlab="D1 Shannon", main="D1 Shannon Histogram")
hist(AAD$D6.Shannon.diversity, xlab="D6 Shannon", main="D6 Shannon Histogram")
hist(AAD$D1.Chao1.diversity, xlab="D1 Chao1", main="D1 Chao1 Histogram")
hist(AAD$D6.Chao1.diversity, xlab="D6 Chao1", main="D6 Chao1 Histogram")
hist(AAD$D1.D6.Jaccard.distance, xlab="Jacard Distance", main="Jacard Distance Histogram")
hist(AAD$D6.Shannon.diversity, xlab="D6 Shannon", main="D6 Shannon Histogram")
hist(AAD$D1.Chao1.diversity, xlab="D1 Chao1", main="D1 Chao1 Histogram")
# Check the normality of variables using Shapiro Test
shapiro.test(AAD$D1.Shannon.diversity)
shapiro.test(AAD$D6.Shannon.diversity)
shapiro.test(AAD$D1.Chao1.diversity)
shapiro.test(AAD$D6.Chao1.diversity)
shapiro.test(AAD$D1.D6.Jaccard.distance)
#Multiple Regression:-
linear_reg <- lm(D6.Chao1.diversity~D1.Chao1.diversity+Antibiotic.class, data = mydata)
#Multiple Regression:-
linear_reg <- lm(D6.Chao1.diversity~D1.Chao1.diversity+Antibiotic.class, data = AAD)
View(linear_reg)
linear_reg
summary(linear_reg)
View(AAD)
avPlots(linear_reg)
library(car)
avPlots(linear_reg)
# Anova
library(car)
library(report)
AnovaModel = aov(D1.D6.Jaccard.distance~Antibiotic.class, mydata)
AnovaModel = aov(D1.D6.Jaccard.distance~Antibiotic.class, AAD)
summary(AnovaModel)
report(AnovaModel)
# Posthoc
TukeyHSD(AnovaModel)
plot(TukeyHSD(AnovaModel))
# calculate a frequency table for the categorical variables existing
table(AAD$Antibiotic.class)
table(AAD$Outcome)
# Calculate the correlation coefficient between D1 Shannon and D6 Shannon
cor(AAD$D1.Shannon.diversity, AAD$D6.Shannon.diversity)
# Calculate the correlation coefficient between D1 Chao D6 Chao
cor(AAD$D1.Chao1.diversity, AAD$D6.Chao1.diversity)
# Posthoc
TukeyHSD(AnovaModel)
sum(is.na(AAD))
# Generate a bar chart of a categorical variable for the Outcome (AAD, CDI ,ND)
barplot(table(AAD$Outcome), xlab= "Outcome", ylab="Frequency", main="Outcome Barplot")
# Generate a bar chart of a categorical variable for the Outcome (AAD, CDI ,ND)
barplot(table(AAD$Outcome), xlab= "Outcome", ylab="Frequency", main="Outcome Barplot")
# Generate a bar chart graph with mean Outcome in BOL, FQ, OBL
barplot(tapply(AAD$D1.Shannon.diversity,list(AAD$Outcome), mean), xlab="Antibiotics",
ylab="Mean Outcome", main="Mean Outcome Barplot")
barplot(tapply(AAD$D6.Shannon.diversity,list(AAD$Antibiotic.class), mean), xlab="Antibiotics",
ylab="Mean Outcome", main="Mean Outcome Barplot")
# Make a histogram of a continuous variable: “D1 Shannon” as well as “D6 Shannon”
hist(AAD$D1.Shannon.diversity, xlab="D1.Shannon", ylab="Frequency",
main="D1.Shannon Histogram")
# Generate a bar chart of a categorical variable for the Outcome (AAD, CDI ,ND)
barplot(table(AAD$Outcome), xlab= "Outcome", ylab="Frequency", main="Outcome Barplot")
# Generate a bar chart graph with mean Outcome in BOL, FQ, OBL
barplot(tapply(AAD$D1.Shannon.diversity,list(AAD$Outcome), mean), xlab="Antibiotics",
ylab="Mean Outcome", main="Mean Outcome Barplot")
barplot(tapply(AAD$D6.Shannon.diversity,list(AAD$Antibiotic.class), mean), xlab="Antibiotics",
ylab="Mean Outcome", main="Mean Outcome Barplot")
# Make a histogram of a continuous variable: “D1 Shannon” as well as “D6 Shannon”
hist(AAD$D1.Shannon.diversity, xlab="D1.Shannon", ylab="Frequency",
main="D1.Shannon Histogram")
hist(AAD$D6.Shannon.diversity, xlab="D6.Shannon", ylab="Frequency",
main="D6.Shannon Histogram")
# Make a scatterplot of 2 continuous variables D1 Shannon and D6 Shannon
plot(D1.Shannon.diversity[Antibiotic.class=="OBL"]~D6.Shannon.diversity[Antibiotic.class=="OBL"],
data= AAD, xlab="D1.Shannon", ylab="D6.Shannon", main="D1.Shannon and D6.Shannon Scatterplot")
# Make a scatterplot of 2 continuous variables D1 Shannon and D6 Shannon
plot(D1.Shannon.diversity[Antibiotic.class=="OBL"]~D6.Shannon.diversity[Antibiotic.class=="OBL"],
data= AAD,  main="D1.Shannon and D6.Shannon Scatterplot")
xlab="D1.Shannon", ylab="D6.Shannon",
# Make a scatterplot of 2 continuous variables D1 Shannon and D6 Shannon
plot(D1.Shannon.diversity[Antibiotic.class=="OBL"]~D6.Shannon.diversity[Antibiotic.class=="OBL"],
data= AAD, xlab="D6.Shannon", ylab="D1.Shannon", main="D1.Shannon and D6.Shannon Scatterplot")
plot(AAD$D1.Shannon.diversity[AAD$Antibiotic.class=="FQN"],AAD$D6.Shannon.diversity[AAD$Antibiotic.class=="FQN"],
col=6,xlab="D1.Shannon.diversity",ylab="D6.Shannon.diversity",main="Scatterplot")
points(D6.Shannon.diversity[Antibiotic.class=="FQN"]~D1.Shannon.diversity[Antibiotic.class=="FQN"],
data= AAD)
# Make a scatterplot of 2 continuous variables D1 Shannon and D6 Shannon
plot(D1.Shannon.diversity[Antibiotic.class=="OBL"]~D6.Shannon.diversity[Antibiotic.class=="OBL"],
data= AAD, xlab="D6.Shannon", ylab="D1.Shannon", main="D1.Shannon and D6.Shannon Scatterplot")
# Make a scatterplot of 2 continuous variables D1 Shannon and D6 Shannon
plot(D6.Shannon.diversity[Antibiotic.class=="OBL"]~D1.Shannon.diversity[Antibiotic.class=="OBL"],
data= AAD, xlab="D6.Shannon", ylab="D1.Shannon", main="D1.Shannon and D6.Shannon Scatterplot")
plot(AAD$D1.Shannon.diversity[AAD$Antibiotic.class=="FQN"],AAD$D6.Shannon.diversity[AAD$Antibiotic.class=="FQN"],
col=6,xlab="D1.Shannon.diversity",ylab="D6.Shannon.diversity",main="Scatterplot")
points(D6.Shannon.diversity[Antibiotic.class=="FQN"]~D1.Shannon.diversity[Antibiotic.class=="FQN"],
data= AAD)
points(D6.Shannon.diversity[Antibiotic.class=="PBL"]~D1.Shannon.diversity[Antibiotic.class=="PBL"],
data= AAD)
# add the regression lines for each antibiotics
abline(lm(AAD$D6.Shannon.diversity[AAD$Antibiotic.class=="OBL"]~
AAD$D1.Shannon.diversity[AAD$Antibiotic.class=="OBL"]))
abline(lm(AAD$D6.Shannon.diversity[AAD$Antibiotic.class=="FQN"]~
AAD$D1.Shannon.diversity[AAD$Antibiotic.class=="FQN"]))
abline(lm(AAD$D6.Shannon.diversity[AAD$Antibiotic.class=="PBL"]~
AAD$D1.Shannon.diversity[AAD$Antibiotic.class=="PBL"]))
# Make a boxplot of Jacard distance
boxplot(AAD$D1.D6.Jaccard.distance~AAD$Antibiotic.class,data=AAD,main="Boxplot per Antibiotics",
xlab="Antibiotics",ylab="D1.D6.Jaccard.distance")
# Explore the data for any existing outliers, identify them using boxplot
# Outliers can be found in numerical variables and not categorical ones
boxplot(AAD$D1.Shannon.diversity, main="D1 Shannon Boxplot")
# extracting outliers in D1.Shannon and detecting their number
length(boxplot.stats(AAD$D1.Shannon.diversity)$out)
boxplot(AAD$D6.Shannon.diversity)
# extracting outliers in D6.Shannon and detecting their number
length(boxplot.stats(AAD$D6.Shannon.diversity)$out)
boxplot(AAD$D1.Chao1.diversity)
# extracting outliers in D1.Chao1 and detecting their number
length(boxplot.stats(AAD$D1.Chao1.diversity)$out)
boxplot(AAD$D6.Chao1.diversity)
# extracting outliers in D6.Chao1 and detecting their number
length(boxplot.stats(AAD$D6.Chao1.diversity)$out)
boxplot(AAD$D1.D6.Jaccard.distance)
# extracting outliers in Jaccard distance and detecting their number
length(boxplot.stats(AAD$D1.D6.Jaccard.distance)$out)
# Check the normality of variables using QQ plot
qqnorm(AAD$D1.Shannon.diversity)
qqline(AAD$D1.Shannon.diversity)
qqnorm(AAD$D6.Shannon.diversity)
qqline(AAD$D6.Shannon.diversity)
qqnorm(AAD$D1.Chao1.diversity)
qqline(AAD$D1.Chao1.diversity)
qqnorm(AAD$D6.Chao1.diversity)
qqline(AAD$D6.Chao1.diversity)
qqnorm(AAD$D1.D6.Jaccard.distance)
qqline(AAD$D1.D6.Jaccard.distance)
# Check the normality of variables using histogram
hist(AAD$D1.Shannon.diversity, xlab="D1 Shannon", main="D1 Shannon Histogram")
hist(AAD$D6.Shannon.diversity, xlab="D6 Shannon", main="D6 Shannon Histogram")
hist(AAD$D1.Chao1.diversity, xlab="D1 Chao1", main="D1 Chao1 Histogram")
hist(AAD$D6.Chao1.diversity, xlab="D6 Chao1", main="D6 Chao1 Histogram")
hist(AAD$D1.D6.Jaccard.distance, xlab="Jacard Distance", main="Jacard Distance Histogram")
# Check the normality of variables using Shapiro Test
shapiro.test(AAD$D1.Shannon.diversity)
shapiro.test(AAD$D6.Shannon.diversity)
shapiro.test(AAD$D1.Chao1.diversity)
shapiro.test(AAD$D6.Chao1.diversity)
shapiro.test(AAD$D1.D6.Jaccard.distance)
# Check the homoscedasticity using Bartlett test test.
bartlett.test(list(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity))
var.test(AAD$D1.Shannon.diversity,AAD$D6.Shannon.diversity)
# Check the homoscedasticity using residuals plots
plot(lm(D6.Chao1.diversity~D1.Chao1.diversity, data= AAD))
var.test(AAD$D1.Chao1.diversity,AAD$D6.Chao1.diversity)
# according to the bartlett and F tests between D1 and D6 Cha
# Check the normality of variables using QQ plot
qqnorm(AAD$D1.Shannon.diversity)
#Multiple Regression:-
linear_reg <- lm(D6.Chao1.diversity~D1.Chao1.diversity+Antibiotic.class, data = AAD)
summary(linear_reg)
# Generate a bar chart graph with mean Outcome in BOL, FQ, OBL
barplot(tapply(AAD$D1.Shannon.diversity,list(AAD$Outcome), mean), xlab="Antibiotics",
ylab="Mean Outcome", main="Mean Outcome Barplot")
# Calculate the confidence interval for the slope(Bonus)
confint(linear_reg, level = 0.95)
# Anova
library(car)
library(report)
AnovaModel = aov(D1.D6.Jaccard.distance~Antibiotic.class, AAD)
summary(AnovaModel)
